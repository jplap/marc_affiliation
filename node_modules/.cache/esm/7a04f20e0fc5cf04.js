let Database;_0fc‍.w("./Database",[["Database",["Database"],function(v){Database=v}]]);const dotenv = require("dotenv");
var mariadb      = require('mariadb');
var mysql = require('mysql');
var path = require('path');


//var direnv = __dirname + '/../config.env'
var direnv = path.join(__dirname ,'..', 'config.env')
_0fc‍.g.console.log("direnv: " + direnv);
dotenv.config({ path: direnv });

_0fc‍.g.console.log("DB_HOST: " + process.env.DB_HOST);
_0fc‍.g.console.log("DB_USER: " + process.env.DB_USER);
//const pool = mariadb.createPool({host: process.env.DB_HOST, user: process.env.DB_USER, password: process.env.DB_PASSWORD, database: process.env.DB_NAME, connectionLimit: 5});
//const connection = mysql.createConnection({host: process.env.DB_HOST, user: process.env.DB_USER, password: process.env.DB_PASSWORD, database: process.env.DB_NAME, connectionLimit: 5});


database = new Database({host: process.env.DB_HOST, user: process.env.DB_USER, password: process.env.DB_PASSWORD, database: process.env.DB_NAME, connectionLimit: 5})


const https = require('https');
var PREFIX = "idController: ";
var foo = { "results": [
        {
            "id": 12,
            "name": "Test",
            "status": 0
        },
        {
            "id": 2,
            "name": "Beispiel",
            "status": 0
        },
        {
            "id": 3,
            "name": "Sample",
            "status": 0
        }
    ] };

function asyncFunction() {
    let conn;
    try {

        connection.connect(function(err) {
            if (err) throw err;
            connection.query("SELECT * FROM uuidform", function (err, result, fields) {
                if (err) throw err;
                _0fc‍.g.console.log(result);
                return result;
            });
        });

    } catch (err) {
        throw err;
    } finally {
        if (conn) conn.release(); //release to pool
    }
}

function setStatus( id , newstatus ){
    var operationStatus = false;
    for ( var i = 0; i<foo.results.length; i++ ){
        if ( id === foo.results[i].id ) {
            foo.results[i].status = newstatus;
            newrec = foo.results[i];
            operationStatus = true;
            break;
        }
    }
    return operationStatus;
}
exports.fetch = function (req, res) {
    _0fc‍.g.console.log( PREFIX + "fetch" + JSON.stringify(foo));
    /*connection.connect(function(err) {
        if (err) throw err;
        connection.query("SELECT * FROM uuidform", function (err, result, fields) {
            if (err) throw err;
            console.log(result);
        });
    });*/


    let someRows, otherRows;
    database.query( 'SELECT * FROM uuidform' )
        .then( rows => {
            someRows = rows;
            return someRows;
            //return database.query( 'SELECT * FROM other_table' );
        } )
        .then( rows => {
            otherRows = rows;
            return database.close();
        } )
        .then( () => {
            // do something with someRows and otherRows
        } );


    res.send(foo);

}

exports.delete = function (req, res) {
    const idToDelete = req.params.id;
    var foonew = {"results":[]}
    var j = 0
    var operationStatus = false;
    for ( var i = 0; i<foo.results.length; i++ ){
        if ( idToDelete != foo.results[i].id ) {
            foonew.results.push(foo.results[i]);


        }else{
            operationStatus = true;
        }
    }
    foo = foonew;

    if ( operationStatus == false ){
        _0fc‍.g.console.log( PREFIX + "delete id:" + idToDelete + " failed")
        res.status(204);
    }else {

        _0fc‍.g.console.log(PREFIX + "delete id:" + idToDelete)
    }
    res.send();

}

exports.add = function (req, res) {
    var data = req.body;
    if (data && !data[0].status ){
        data[0].status = 0;
    }
    //var size = Object.keys(data);
    if ( data != null && data.length > 0   ) {
        foo.results.push(data[0]);
    }

    _0fc‍.g.console.log( PREFIX + "add done" )
    res.send();

}
exports.setStatus = function (req, res) {

    const id = req.params.id;
    const newstatus = req.params.status;
    var newrec = {};
    var j = 0
    var operationStatus = false;
    setStatus( id, newstatus );
    if ( operationStatus == false ){
        _0fc‍.g.console.log( PREFIX + "setStatus id:" + id + " failed")
        res.status(204);
    }else {
        _0fc‍.g.console.log(PREFIX + "setStatus" + JSON.stringify(newrec))
    }
    res.send(foo);
}

exports.action = function (req, res) {
    var data = req.body;
    var operationStatus = false;
    var id = -1;

    if (data && !data.id ){
        //nothing to do

    }else{
        id = data.id;
        newstatus = 2;
        setStatus( id, newstatus );
        operationStatus = true;
    }



    if ( operationStatus == false ){
        _0fc‍.g.console.log( PREFIX + "action failed")
        res.status(204);
    }else {
        _0fc‍.g.console.log(PREFIX + "action done on id:" + id)
    }
    res.send();

}
